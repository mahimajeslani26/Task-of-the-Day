{"version":3,"sources":["Components/UserInput.js","Components/Task.js","Components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["UserInput","props","id","mode","tasks","findIndex","task","isSelected","useState","input_value","setInputValue","useEffect","detail","className","type","value","onChange","e","target","onClick","handleAddEditTask","document","getElementById","Task","taskStyle","background","isDone","handle","style","source","escapeHtml","handletaskDone","taskId","handleSelectTask","handleDeleteTask","TaskList","task_list","map","key","App","state","bind","this","completed_task","splice","push","setState","console","log","task_detail","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d6a49fe.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction UserInput(props) {\n  const id =\n    props.mode === 2 ? props.tasks.findIndex((task) => task.isSelected) : null;\n  const [input_value, setInputValue] = useState('');\n  useEffect(() => {\n    setInputValue(props.mode === 2 ? props.tasks[id].detail : '');\n  }, [props, id]);\n\n  return (\n    <div className='UserInput'>\n      <input\n        id='user_input'\n        type='text'\n        value={input_value}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n      <input\n        type='submit'\n        value={props.mode === 1 ? 'Add' : 'Edit'}\n        onClick={() =>\n          props.handleAddEditTask(\n            id,\n            document.getElementById('user_input').value\n          )\n        }\n      />\n    </div>\n  );\n}\n\nexport default UserInput;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport '../style/Task.css';\nimport Draggable from 'react-draggable';\n\nfunction Task(props) {\n  const taskStyle = {\n    background: props.task.isDone ? 'darkseagreen' : 'rosybrown',\n  };\n\n  return (\n    <Draggable handle='#task-content'>\n      <div className='Task' style={taskStyle}>\n        <div id='task-content'>\n          <ReactMarkdown source={props.task.detail} escapeHtml={false} />\n        </div>\n\n        <div id='task-actions'>\n          {props.task.isDone ? null : (\n            <div>\n              <input\n                id='done_button'\n                type='button'\n                value='Done'\n                onClick={() => props.handletaskDone(props.taskId)}\n              />\n              <br />\n            </div>\n          )}\n\n          {props.task.isDone ? null : (\n            <div>\n              <input\n                id='edit_button'\n                type='button'\n                value='Edit'\n                onClick={() => props.handleSelectTask(props.taskId)}\n              />\n              <br />\n            </div>\n          )}\n          <input\n            id='delete_button'\n            type='button'\n            value='Delete'\n            onClick={() => props.handleDeleteTask(props.taskId)}\n          />\n        </div>\n      </div>\n    </Draggable>\n  );\n}\n\nexport default Task;\n","import React from 'react';\nimport Task from './Task';\n\nfunction TaskList(props) {\n  return (\n    <div className='TaskList'>\n      {props.task_list.map((task, id) => {\n        return (\n          <Task\n            key={id}\n            task={task}\n            handletaskDone={props.handletaskDone}\n            handleDeleteTask={props.handleDeleteTask}\n            handleSelectTask={props.handleSelectTask}\n            taskId={id}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default TaskList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport UserInput from './Components/UserInput';\nimport TaskList from './Components/TaskList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [\n        {\n          detail: 'Cook dinner',\n          isDone: false,\n          isSelected: false,\n        },\n        {\n          detail: 'Do exercise',\n          isDone: false,\n          isSelected: false,\n        },\n        {\n          detail: 'cook lunch',\n          isDone: false,\n          isSelected: false,\n        },\n      ],\n      mode: 1,\n    };\n    this.handletaskDone = this.handletaskDone.bind(this);\n    this.handleDeleteTask = this.handleDeleteTask.bind(this);\n    this.handleSelectTask = this.handleSelectTask.bind(this);\n    this.handleAddEditTask = this.handleAddEditTask.bind(this);\n  }\n\n  handletaskDone(id) {\n    const { tasks } = this.state;\n    tasks[id].isDone = true;\n    const completed_task = tasks[id];\n    tasks.splice(id, 1);\n    tasks.push(completed_task);\n    this.setState({\n      tasks,\n    });\n    console.log(`task ${tasks[id].detail} done`);\n  }\n\n  handleDeleteTask(id) {\n    const { tasks } = this.state;\n    console.log(tasks[id]);\n    const task_detail = tasks[id].detail;\n    console.log(task_detail);\n    tasks.splice(id, 1);\n    console.log(tasks);\n    this.setState({\n      tasks,\n    });\n    console.log(`task ${task_detail} deleted`);\n  }\n\n  handleSelectTask(id) {\n    const { tasks } = this.state;\n\n    tasks[id].isSelected = true;\n    //change mode to Edit\n    this.setState({\n      tasks,\n      mode: 2,\n    });\n    console.log(`task ${tasks[id].detail} is selected`);\n  }\n\n  handleAddEditTask(id, detail) {\n    // adds a task if mode is Add or update the task at id\n    console.log(id);\n    const { tasks, mode } = this.state;\n    if (mode === 1) {\n      tasks.push({\n        detail: detail,\n        isSelected: false,\n        isDone: false,\n      });\n    } else {\n      tasks[id].detail = detail;\n    }\n    //change the mode to Add\n    this.setState({\n      tasks,\n      mode: 1,\n    });\n  }\n\n  render() {\n    const { tasks, mode } = this.state;\n\n    return (\n      <div className='App'>\n        <h1>Today's Tasks</h1>\n        <UserInput\n          mode={mode}\n          handleAddEditTask={this.handleAddEditTask}\n          tasks={tasks}\n        />\n        <TaskList\n          task_list={tasks}\n          handletaskDone={this.handletaskDone}\n          handleDeleteTask={this.handleDeleteTask}\n          handleSelectTask={this.handleSelectTask}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}